[[_interactive_staging]]
//////////////////////////
=== Interactive Staging
//////////////////////////
=== 対話的なステージング

//////////////////////////
Git comes with a couple of scripts that make some command-line tasks easier.
Here, you’ll look at a few interactive commands that can help you easily craft your commits to include only certain combinations and parts of files.
These tools are very helpful if you modify a bunch of files and then decide that you want those changes to be in several focused commits rather than one big messy commit.
This way, you can make sure your commits are logically separate changesets and can be easily reviewed by the developers working with you.
If you run `git add` with the `-i` or `--interactive` option, Git goes into an interactive shell mode, displaying something like this:
//////////////////////////
Git には、コマンドラインでの作業をしやすくするためのスクリプトがいくつか付属しています。
ここでは、対話コマンドをいくつか紹介しましょう。これらを使うと、コミットの内容に細工をして特定のコミットだけとかファイルの中の一部だけとかを含めるようにすることが簡単にできるようになります。
大量のファイルを変更した後に、それをひとつの馬鹿でかいコミットにしてしまうのではなくテーマごとの複数のコミットに分けて処理したい場合などに非常に便利です。
このようにして各コミットを論理的に独立した状態にしておけば、同僚によるレビューも容易になります。
`git add` に `-i` あるいは `--interactive` というオプションをつけて実行すると、Git は対話シェルモードに移行し、このように表示されます。

[source,console]
----
$ git add -i
           staged     unstaged path
  1:    unchanged        +0/-1 TODO
  2:    unchanged        +1/-1 index.html
  3:    unchanged        +5/-1 lib/simplegit.rb

*** Commands ***
  1: status     2: update      3: revert     4: add untracked
  5: patch      6: diff        7: quit       8: help
What now>
----

//////////////////////////
You can see that this command shows you a much different view of your staging area – basically the same information you get with `git status` but a bit more succinct and informative.
It lists the changes you’ve staged on the left and unstaged changes on the right.
//////////////////////////
このコマンドは、ステージングエリアに関する情報を違った観点で表示します。`git status` で得られる情報と基本的には同じですが、より簡潔で有益なものとなっています。
ステージした変更が左側、そしてステージしていない変更が右側に表示されます。

//////////////////////////
After this comes a Commands section.
Here you can do a number of things, including staging files, unstaging files, staging parts of files, adding untracked files, and seeing diffs of what has been staged.
//////////////////////////
Commands セクションでは、さまざまなことができるようになっています。
ファイルをステージしたりステージングエリアから戻したり、ファイルの一部だけをステージしたりまだ追跡されていないファイルを追加したり、あるいは何がステージされたのかを diff で見たりといったことが可能です。

//////////////////////////
==== Staging and Unstaging Files
//////////////////////////

//////////////////////////
If you type `2` or `u` at the `What now>` prompt, the script prompts you for which files you want to stage:
//////////////////////////
`What now>` プロンプトで `2` または `u` と入力すると、どのファイルをステージするかを聞いてきます。

[source,console]
----
What now> 2
           staged     unstaged path
  1:    unchanged        +0/-1 TODO
  2:    unchanged        +1/-1 index.html
  3:    unchanged        +5/-1 lib/simplegit.rb
Update>>
----

//////////////////////////
To stage the TODO and index.html files, you can type the numbers:
//////////////////////////
TODO と index.html をステージするには、その番号を入力します。

[source,console]
----
Update>> 1,2
           staged     unstaged path
* 1:    unchanged        +0/-1 TODO
* 2:    unchanged        +1/-1 index.html
  3:    unchanged        +5/-1 lib/simplegit.rb
Update>>
----

//////////////////////////
The `*` next to each file means the file is selected to be staged.
If you press Enter after typing nothing at the `Update>>` prompt, Git takes anything selected and stages it for you:
//////////////////////////
ファイル名の横に `*` がついていれば、そのファイルがステージ対象として選択されたことを意味します。
`Update>>` プロンプトで何も入力せずに Enter を押すと、選択されたすべてのファイルを Git がステージします。

[source,console]
----
Update>>
updated 2 paths

*** Commands ***
  1: status     2: update      3: revert     4: add untracked
  5: patch      6: diff        7: quit       8: help
What now> 1
           staged     unstaged path
  1:        +0/-1      nothing TODO
  2:        +1/-1      nothing index.html
  3:    unchanged        +5/-1 lib/simplegit.rb
----

//////////////////////////
Now you can see that the TODO and index.html files are staged and the simplegit.rb file is still unstaged.
If you want to unstage the TODO file at this point, you use the `3` or `r` (for revert) option:
//////////////////////////
TODO と index.html がステージされ、simplegit.rb はまだステージされていないままです。ここで仮に TODO ファイルのステージを取り消したくなったとしたら、`3` あるいは `r` (revert の r) を選択します。

[source,console]
----
*** Commands ***
  1: status     2: update      3: revert     4: add untracked
  5: patch      6: diff        7: quit       8: help
What now> 3
           staged     unstaged path
  1:        +0/-1      nothing TODO
  2:        +1/-1      nothing index.html
  3:    unchanged        +5/-1 lib/simplegit.rb
Revert>> 1
           staged     unstaged path
* 1:        +0/-1      nothing TODO
  2:        +1/-1      nothing index.html
  3:    unchanged        +5/-1 lib/simplegit.rb
Revert>> [enter]
reverted one path
----

//////////////////////////
Looking at your Git status again, you can see that you’ve unstaged the TODO file:
//////////////////////////
もう一度 Git のステータスを見ると、TODO ファイルのステージが取り消されていることがわかります。

[source,console]
----
*** Commands ***
  1: status     2: update      3: revert     4: add untracked
  5: patch      6: diff        7: quit       8: help
What now> 1
           staged     unstaged path
  1:    unchanged        +0/-1 TODO
  2:        +1/-1      nothing index.html
  3:    unchanged        +5/-1 lib/simplegit.rb
----

//////////////////////////
To see the diff of what you’ve staged, you can use the `6` or `d` (for diff) command.
It shows you a list of your staged files, and you can select the ones for which you would like to see the staged diff.
This is much like specifying `git diff --cached` on the command line:
//////////////////////////
ステージした変更の diff を見るには、`6` あるいは `d` (diff の d) を使用します。
このコマンドは、ステージしたファイルの一覧を表示します。その中から、ステージされた diff を見たいファイルを選択します。
これは、コマンドラインで `git diff --cached` を使用するのと同じようなことです。

[source,console]
----
*** Commands ***
  1: status     2: update      3: revert     4: add untracked
  5: patch      6: diff        7: quit       8: help
What now> 6
           staged     unstaged path
  1:        +1/-1      nothing index.html
Review diff>> 1
diff --git a/index.html b/index.html
index 4d07108..4335f49 100644
--- a/index.html
+++ b/index.html
@@ -16,7 +16,7 @@ Date Finder

 <p id="out">...</p>

-<div id="footer">contact : support@github.com</div>
+<div id="footer">contact : email.support@github.com</div>

 <script type="text/javascript">
----

//////////////////////////
With these basic commands, you can use the interactive add mode to deal with your staging area a little more easily.
//////////////////////////
これらの基本的なコマンドを使えば、ステージングエリアでの対話的な追加モードを多少簡単に扱えるようになるでしょう。

//////////////////////////
==== Staging Patches
//////////////////////////
==== パッチのステージ

//////////////////////////
It’s also possible for Git to stage certain parts of files and not the rest.
For example, if you make two changes to your simplegit.rb file and want to stage one of them and not the other, doing so is very easy in Git.
From the interactive prompt, type `5` or `p` (for patch).
Git will ask you which files you would like to partially stage; then, for each section of the selected files, it will display hunks of the file diff and ask if you would like to stage them, one by one:
//////////////////////////
Git では、ファイルの特定の箇所だけをステージして他の部分はそのままにしておくということもできます。
たとえば、simplegit.rb のふたつの部分を変更したけれど、そのうちの一方だけをステージしたいという場合があります。Git なら、そんなことも簡単です。
対話モードのプロンプトで `5` あるいは `p` (patch の p) と入力しましょう。
Git は、どのファイルを部分的にステージしたいのかを聞いてきます。その後、選択したファイルのそれぞれについて diff のハンクを順に表示し、ステージするかどうかをひとつひとつたずねます。

[source,console]
----
diff --git a/lib/simplegit.rb b/lib/simplegit.rb
index dd5ecc4..57399e0 100644
--- a/lib/simplegit.rb
+++ b/lib/simplegit.rb
@@ -22,7 +22,7 @@ class SimpleGit
   end

   def log(treeish = 'master')
-    command("git log -n 25 #{treeish}")
+    command("git log -n 30 #{treeish}")
   end

   def blame(path)
Stage this hunk [y,n,a,d,/,j,J,g,e,?]?
----

//////////////////////////
You have a lot of options at this point.
Typing `?` shows a list of what you can do:
//////////////////////////
ここでは多くの選択肢があります。
何ができるのかを見るには `?` を入力しましょう。

[source,console]
----
Stage this hunk [y,n,a,d,/,j,J,g,e,?]? ?
y - stage this hunk
n - do not stage this hunk
a - stage this and all the remaining hunks in the file
d - do not stage this hunk nor any of the remaining hunks in the file
g - select a hunk to go to
/ - search for a hunk matching the given regex
j - leave this hunk undecided, see next undecided hunk
J - leave this hunk undecided, see next hunk
k - leave this hunk undecided, see previous undecided hunk
K - leave this hunk undecided, see previous hunk
s - split the current hunk into smaller hunks
e - manually edit the current hunk
? - print help
----

//////////////////////////
Generally, you’ll type `y` or `n` if you want to stage each hunk, but staging all of them in certain files or skipping a hunk decision until later can be helpful too.
If you stage one part of the file and leave another part unstaged, your status output will look like this:
//////////////////////////
たいていは、`y` か `n` で各ハンクをステージするかどうかを指定していくでしょう。しかし、それ以外にも「このファイルの残りのハンクをすべてステージする」とか「このハンクをステージするかどうかの判断を先送りする」などというオプションも便利です。
あるファイルのひとつの箇所だけをステージして残りはそのままにした場合、ステータスの出力はこのようになります。

[source,console]
----
What now> 1
           staged     unstaged path
  1:    unchanged        +0/-1 TODO
  2:        +1/-1      nothing index.html
  3:        +1/-1        +4/-0 lib/simplegit.rb
----

//////////////////////////
The status of the simplegit.rb file is interesting.
It shows you that a couple of lines are staged and a couple are unstaged.
You’ve partially staged this file.
At this point, you can exit the interactive adding script and run `git commit` to commit the partially staged files.
//////////////////////////
simplegit.rb のステータスがおもしろいことになっています。
ステージされた行もあれば、ステージされていない行もあるという状態です。
つまり、このファイルを部分的にステージしたというわけです。
この時点で対話的追加モードを抜けて `git commit` を実行すると、ステージした部分だけをコミットすることができます。

//////////////////////////
You also don’t need to be in interactive add mode to do the partial-file staging – you can start the same script by using `git add -p` or `git add --patch` on the command line.
//////////////////////////
ファイルを部分的にステージするだけなら、対話的な追加モードに入る必要すらありません。`git add -p` や `git add --patch` をコマンドラインから実行すれば、同じ機能を呼び出せます。

//////////////////////////
Furthermore, you can use patch mode for partially resetting files with the `reset --patch` command, for checking out parts of files with the `checkout --patch` command and for stashing parts of files with the `stash save --patch` command. We'll go into more details on each of these as we get to more advanced usages of these commands.
//////////////////////////
また、このパッチモードを使って、ファイルの一部分だけをリセットすることもできます。その場合のコマンドは `reset --patch` です。同様に、部分的なチェックアウトは `checkout --patch` コマンドを、部分的に退避するなら `stash save --patch` コマンドを使います。各コマンドの詳細は、より高度な使い方に触れるときに併せて紹介します。
