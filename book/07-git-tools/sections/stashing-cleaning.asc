[[_git_stashing]]
//////////////////////////
=== Stashing and Cleaning
//////////////////////////
=== 作業の隠しかたと消しかた

//////////////////////////
Often, when you’ve been working on part of your project, things are in a messy state and you want to switch branches for a bit to work on something else.
The problem is, you don’t want to do a commit of half-done work just so you can get back to this point later.
The answer to this issue is the `git stash` command.
//////////////////////////
何らかのプロジェクトの一員として作業している場合にありがちなのですが、ある作業が中途半端な状態になっているときに、ブランチを切り替えてちょっとだけ別の作業をしたくなることがあります。
中途半端な状態をコミットしてしまうのはいやなので、できればコミットせずにしておいて後でその状態から作業を再開したいものです。
そんなときに使うのが `git stash` コマンドです。

//////////////////////////
Stashing takes the dirty state of your working directory – that is, your modified tracked files and staged changes – and saves it on a stack of unfinished changes that you can reapply at any time.
//////////////////////////
これは、作業ディレクトリのダーティな状態 (追跡しているファイルのうち変更されたもの、そしてステージされた変更) を受け取って未完了の作業をスタックに格納し、あとで好きなときに再度それを適用できるようにするものです。

//////////////////////////
==== Stashing Your Work
//////////////////////////
==== 自分の作業を隠す

//////////////////////////
To demonstrate, you’ll go into your project and start working on a couple of files and possibly stage one of the changes.
If you run `git status`, you can see your dirty state:
//////////////////////////
例を見てみましょう。自分のプロジェクトでいくつかのファイルを編集し、その中のひとつをステージしたとします。
ここで `git status` を実行すると、ダーティな状態を確認することができます。

[source,console]
----
$ git status
Changes to be committed:
  (use "git reset HEAD <file>..." to unstage)

	modified:   index.html

Changes not staged for commit:
  (use "git add <file>..." to update what will be committed)
  (use "git checkout -- <file>..." to discard changes in working directory)

	modified:   lib/simplegit.rb
----

//////////////////////////
Now you want to switch branches, but you don’t want to commit what you’ve been working on yet; so you’ll stash the changes.
To push a new stash onto your stack, run `git stash` or `git stash save`:
//////////////////////////
ここで別のブランチに切り替えることになりましたが、現在の作業内容はまだコミットしたくありません。そこで、変更をいったん隠すことにします。
新たにスタックに隠すには `git stash` か `git stash save` を実行します。

[source,console]
----
$ git stash
Saved working directory and index state \
  "WIP on master: 049d078 added the index file"
HEAD is now at 049d078 added the index file
(To restore them type "git stash apply")
----

//////////////////////////
Your working directory is clean:
//////////////////////////
これで、作業ディレクトリはきれいな状態になりました。

[source,console]
----
$ git status
# On branch master
nothing to commit, working directory clean
----

//////////////////////////
At this point, you can easily switch branches and do work elsewhere; your changes are stored on your stack.
To see which stashes you’ve stored, you can use `git stash list`:
//////////////////////////
これで、簡単にブランチを切り替えて別の作業をできるようになりました。これまでの変更内容はスタックに格納されています。
今までに格納した内容を見るには `git stash list` を使います。

[source,console]
----
$ git stash list
stash@{0}: WIP on master: 049d078 added the index file
stash@{1}: WIP on master: c264051 Revert "added file_size"
stash@{2}: WIP on master: 21d80a5 added number to log
----

//////////////////////////
In this case, two stashes were done previously, so you have access to three different stashed works.
You can reapply the one you just stashed by using the command shown in the help output of the original stash command: `git stash apply`.
If you want to apply one of the older stashes, you can specify it by naming it, like this: `git stash apply stash@{2}`.
If you don’t specify a stash, Git assumes the most recent stash and tries to apply it:
//////////////////////////
この例では、以前にも二回ほど作業を隠していたようです。そこで、三種類の異なる作業にアクセスできるようになっています。
先ほど隠した変更を再度適用するには、stash コマンドの出力に書かれていたように `git stash apply` コマンドを実行します。
それよりもっと前に隠したものを適用したい場合は `git stash apply stash@{2}` のようにして名前を指定することもできます。
名前を指定しなければ、Git は直近に隠された変更を再適用します。

[source,console]
----
$ git stash apply
# On branch master
# Changed but not updated:
#   (use "git add <file>..." to update what will be committed)
#
#      modified:   index.html
#      modified:   lib/simplegit.rb
#
----

//////////////////////////
You can see that Git re-modifies the files you reverted when you saved the stash.
In this case, you had a clean working directory when you tried to apply the stash, and you tried to apply it on the same branch you saved it from; but having a clean working directory and applying it on the same branch aren’t necessary to successfully apply a stash.
You can save a stash on one branch, switch to another branch later, and try to reapply the changes.
You can also have modified and uncommitted files in your working directory when you apply a stash – Git gives you merge conflicts if anything no longer applies cleanly.
//////////////////////////
このコマンドによって、さきほど隠したファイルが元に戻ったことがわかるでしょう。
今回は、作業ディレクトリがきれいな状態で変更を書き戻しました。また、変更を隠したときと同じブランチに書き戻しています。しかし、隠した内容を再適用するためにこれらが必須条件であるというわけではありません。
あるブランチの変更を隠し、別のブランチに移動して移動先のブランチにそれを書き戻すこともできます。また、隠した変更を書き戻す際に、現在のブランチに未コミットの変更があってもかまいません。もしうまく書き戻せなかった場合は、マージ時のコンフリクトと同じようになります。

//////////////////////////
The changes to your files were reapplied, but the file you staged before wasn’t restaged.
To do that, you must run the `git stash apply` command with a `--index` option to tell the command to try to reapply the staged changes.
If you had run that instead, you’d have gotten back to your original position:
//////////////////////////
さて、ファイルへの変更はもとどおりになりましたが、以前にステージしていたファイルはステージされていません。
これを行うには、`git stash apply` コマンドに `--index` オプションをつけて実行し、変更のステージ処理も再適用するよう指示しなければなりません。
先ほどのコマンドのかわりにこれを実行すると、元の状態に戻ります。

[source,console]
----
$ git stash apply --index
# On branch master
# Changes to be committed:
#   (use "git reset HEAD <file>..." to unstage)
#
#      modified:   index.html
#
# Changed but not updated:
#   (use "git add <file>..." to update what will be committed)
#
#      modified:   lib/simplegit.rb
#
----

//////////////////////////
The apply option only tries to apply the stashed work – you continue to have it on your stack.
To remove it, you can run `git stash drop` with the name of the stash to remove:
//////////////////////////
apply オプションは、スタックに隠した作業を再度適用するだけで、スタックにはまだその作業が残ったままになります。
スタックから削除するには、`git stash drop` に削除したい作業の名前を指定して実行します。

[source,console]
----
$ git stash list
stash@{0}: WIP on master: 049d078 added the index file
stash@{1}: WIP on master: c264051 Revert "added file_size"
stash@{2}: WIP on master: 21d80a5 added number to log
$ git stash drop stash@{0}
Dropped stash@{0} (364e91f3f268f0900bc3ee613f9f733e82aaed43)
----

//////////////////////////
You can also run `git stash pop` to apply the stash and then immediately drop it from your stack.
//////////////////////////
あるいは `git stash pop` を実行すれば、隠した内容を再適用してその後スタックからも削除してくれます。

//////////////////////////
==== Creative Stashing
//////////////////////////
==== ファイルを隠す機能の応用

//////////////////////////
There are a few stash variants that may also be helpful. The first option that is quite popular is the `--keep-index` option to the `stash save` command. This tells Git to not stash anything that you've already staged with the `git add` command.
//////////////////////////
ファイルの隠しかたは何パターンかあり、役立つものがあるかもしれません。まずひとつ目、`stash save` コマンドの `--keep-index` オプションです。これはよく使われているオプションで、`git add` コマンドでインデックスに追加した内容を隠したくないときに用います。

//////////////////////////
This can be really helpful if you've made a number of changes but want to only commit some of them and then come back to the rest of the changes at a later time.
//////////////////////////
あれこれと変更したうちの一部だけをコミットして、残りは後ほど処置したい場合、この機能が役立つでしょう。

[source,console]
----
$ git status -s
M  index.html
 M lib/simplegit.rb

$ git stash --keep-index
Saved working directory and index state WIP on master: 1b65b17 added the index file
HEAD is now at 1b65b17 added the index file

$ git status -s
M  index.html
----

//////////////////////////
Another common thing you may want to do with stash is to stash the untracked files as well as the tracked ones. By default, `git stash` will only store files that are already in the index. If you specify `--include-untracked` or `-u`, Git will also stash any untracked files you have created.
//////////////////////////
変更を隠すときの要望といえば、追跡しているファイルとそうでないファイルをどちらも一緒に隠してしまいたい、というのもあるでしょう。デフォルトでは、`git stash` コマンドが保存するのは追跡しているファイルだけです。けれど、`--include-untracked`（短縮形は `-u`）オプションを使うと、追跡していないファイルも一緒に保管して隠してくれます。

[source,console]
----
$ git status -s
M  index.html
 M lib/simplegit.rb
?? new-file.txt

$ git stash -u
Saved working directory and index state WIP on master: 1b65b17 added the index file
HEAD is now at 1b65b17 added the index file

$ git status -s
$
----

//////////////////////////
Finally, if you specify the `--patch` flag, Git will not stash everything that is modified but will instead prompt you interactively which of the changes you would like to stash and which you would like to keep in your working directly.
//////////////////////////
もうひとつの応用例として、`--patch` オプションを挙げておきましょう。これを使うと、変更内容をすべて隠してしまうのではなく、隠したい変更を対話的に選択できるようになります。この場合、選択されなかった変更は作業ディレクトリに残ることになります。

[source,console]
----
$ git stash --patch
diff --git a/lib/simplegit.rb b/lib/simplegit.rb
index 66d332e..8bb5674 100644
--- a/lib/simplegit.rb
+++ b/lib/simplegit.rb
@@ -16,6 +16,10 @@ class SimpleGit
         return `#{git_cmd} 2>&1`.chomp
       end
     end
+
+    def show(treeish = 'master')
+      command("git show #{treeish}")
+    end

 end
 test
Stash this hunk [y,n,q,a,d,/,e,?]? y

Saved working directory and index state WIP on master: 1b65b17 added the index file
----

//////////////////////////
==== Creating a Branch from a Stash
//////////////////////////
==== 隠した変更からのブランチの作成

//////////////////////////
If you stash some work, leave it there for a while, and continue on the branch from which you stashed the work, you may have a problem reapplying the work.
If the apply tries to modify a file that you’ve since modified, you’ll get a merge conflict and will have to try to resolve it.
If you want an easier way to test the stashed changes again, you can run `git stash branch`, which creates a new branch for you, checks out the commit you were on when you stashed your work, reapplies your work there, and then drops the stash if it applies successfully:
//////////////////////////
作業をいったん隠し、しばらくそのブランチで作業を続けていると、隠した内容を再適用するときに問題が発生する可能性があります。
隠した後に何らかの変更をしたファイルに変更を再適用しようとすると、マージ時にコンフリクトが発生してそれを解決しなければならなくなるでしょう。
もう少しお手軽な方法で以前の作業を確認したい場合は `git stash branch` を実行します。このコマンドは、まず新しいブランチを作成し、作業をスタックに隠したときのコミットをチェックアウトし、スタックにある作業を再適用し、それに成功すればスタックからその作業を削除します。

[source,console]
----
$ git stash branch testchanges
Switched to a new branch "testchanges"
# On branch testchanges
# Changes to be committed:
#   (use "git reset HEAD <file>..." to unstage)
#
#      modified:   index.html
#
# Changed but not updated:
#   (use "git add <file>..." to update what will be committed)
#
#      modified:   lib/simplegit.rb
#
Dropped refs/stash@{0} (f0dfc4d5dc332d1cee34a634182e168c4efc3359)
----

//////////////////////////
This is a nice shortcut to recover stashed work easily and work on it in a new branch.
//////////////////////////
これを使うと、保存していた作業をお手軽に復元して新しいブランチで作業をすることができます。

[[_git_clean]]
//////////////////////////
==== Cleaning your Working Directory
//////////////////////////
==== 作業ディレクトリの掃除

//////////////////////////
Finally, you may not want to stash some work or files in your working directory, but simply get rid of them. The `git clean` command will do this for you.
//////////////////////////
最後に、作業ディレクトリにある変更内容やファイルを隠すのではなく、取り除いてしまいたい場合の話をしましょう。これは、 `git clean` コマンドを使えば実現できます。

//////////////////////////
Some common reasons for this might be to remove cruft that has been generated by merges or external tools or to remove build artifacts in order to run a clean build.
//////////////////////////
このコマンドが役立つのは、マージの結果、あるいは外部ツールによって生成された不要物を取り除いたり、ビルド結果を削除してクリーンな状態でビルドを実行したいときです。

//////////////////////////
You'll want to be pretty careful with this command, since it's designed to remove files from your working directory that are not tracked. If you change your mind, there is often no retrieving the content of those files. A safer option is to run `git stash --all` to remove everything but save it in a stash.
//////////////////////////
このコマンドを実行するときは十分注意してください。作業ディレクトリにあって追跡されていないファイルは削除されるようになっているからです。後で気が変わっても、削除してしまったデータを取り戻すのは難しいでしょう。代わりに `git stash --all` を実行して、すべてを隠してしまうほうが安全です。

//////////////////////////
Assuming you do want to remove cruft files or clean your working directory, you can do so with `git clean`. To remove all the untracked files in your working directory, you can run `git clean -f -d`, which removes any files and also any subdirectories that become empty as a result. The `-f` means 'force' or "really do this".
//////////////////////////
不要物を本当に取り除きたい、作業ディレクトリを掃除したい、という場合は、`git clean` を実行しましょう。作業ディレクトリの追跡されていないファイルをすべて削除するには、`git clean -f -d` を実行します。そうすれば、ファイルをすべて削除し、サブディレクトリを空にしてくれます。`-f` オプションは 'force' の省略形で、「本当にそうしたい」という意味です。

//////////////////////////
If you ever want to see what it would do, you can run the command with the `-n` option, which means ``do a dry run and tell me what you _would_ have removed''.
//////////////////////////
このコマンドを実行するとどうなるか知りたいなら、`-n` オプションがいいでしょう。これを使うと、「リハーサルをして、何が消される _はず_ だったのかを教えて」と Git に指示してくれます。

[source,console]
----
$ git clean -d -n
Would remove test.o
Would remove tmp/
----

//////////////////////////
By default, the `git clean` command will only remove untracked files that are not ignored.  Any file that matches a pattern in your `.gitignore` or other ignore files will not be removed. If you want to remove those files too, such as to remove all `.o` files generated from a build so you can do a fully clean build, you can add a `-x` to the clean command.
//////////////////////////
`git clean` コマンドがデフォルトで削除するのは、追跡されていなくて、かつ無視されてもいないファイルだけです。`.gitignore` ファイルなどの無視設定に合致するファイルは削除されません。そういったファイルも消したい場合は、clean コマンドに `-x` オプションを追加するといいでしょう。完全にクリーンなビルドを行うため、以前のビルドで生成された `.o` ファイルをすべて削除したい、というような場合に使えます。

[source,console]
----
$ git status -s
 M lib/simplegit.rb
?? build.TMP
?? tmp/

$ git clean -n -d
Would remove build.TMP
Would remove tmp/

$ git clean -n -d -x
Would remove build.TMP
Would remove test.o
Would remove tmp/
----

//////////////////////////
If you don't know what the `git clean` command is going to do, always run it with a `-n` first to double check before changing the `-n` to a `-f` and doing it for real. The other way you can be careful about the process is to run it with the `-i` or ``interactive'' flag.
//////////////////////////
`git clean` コマンドが何を削除するのかわからず不安なら、`-n` オプションを常につけるようにしましょう。何が削除されるかを前もって確認してから、 `-n` オプションを `-f` に変えてファイルを実際に削除すればよいのです。また、このコマンドを慎重に実行するもうひとつの方法として、`-i`、「対話モード」オプションというのもあります。

//////////////////////////
This will run the clean command in an interactive mode.
//////////////////////////
これを使えば、clean コマンドを対話モードで実行できます。

[source,console]
----
$ git clean -x -i
Would remove the following items:
  build.TMP  test.o
*** Commands ***
    1: clean                2: filter by pattern    3: select by numbers    4: ask each             5: quit
    6: help
What now>
----

//////////////////////////
This way you can step through each file individually or specify patterns for deletion interactively.
//////////////////////////
この方法であれば、ファイルを個別に選んだり、パターンマッチさせるなど対話モードで範囲を絞り込んだうえでファイルを削除できます。
