[[_getting_a_repo]]
//////////////////////////
=== Getting a Git Repository
//////////////////////////
=== Git リポジトリの取得

//////////////////////////
You can get a Git project using two main approaches.
The first takes an existing project or directory and imports it into Git.
The second clones an existing Git repository from another server.
//////////////////////////
Git プロジェクトを取得するには、大きく二通りの方法があります。
ひとつは既存のプロジェクトやディレクトリを Git にインポートする方法、
そしてもうひとつは既存の Git リポジトリを別のサーバーからクローンする方法です。

//////////////////////////
==== Initializing a Repository in an Existing Directory
//////////////////////////
==== 既存のディレクトリでのリポジトリの初期化

//////////////////////////
If you're starting to track an existing project in Git, you need to go to the project's directory and type
//////////////////////////
既存のプロジェクトを Git で管理し始めるときは、そのプロジェクトのディレクトリに移動して次のように打ち込みます。


[source,console]
----
$ git init
----

//////////////////////////
This creates a new subdirectory named `.git` that contains all of your necessary repository files – a Git repository skeleton.
At this point, nothing in your project is tracked yet.
(See <<_git_internals>> for more information about exactly what files are contained in the `.git` directory you just created.)(((git commands, init)))
//////////////////////////
これを実行すると `.git` という名前の新しいサブディレクトリが作られ、リポジトリに必要なすべてのファイル (Git リポジトリのスケルトン) がその中に格納されます。
この時点では、まだプロジェクト内のファイルは一切管理対象になっていません
(今作った `.git` ディレクトリに実際のところどんなファイルが含まれているのかについての詳細な情報は、<<_git_internals>>を参照ください)。(((git commands, init)))

//////////////////////////
If you want to start version-controlling existing files (as opposed to an empty directory), you should probably begin tracking those files and do an initial commit.
You can accomplish that with a few `git add` commands that specify the files you want to track, followed by a `git commit`:
//////////////////////////
空のディレクトリではなくすでに存在するファイルのバージョン管理を始めたい場合は、まずそのファイルを監視対象に追加してから最初のコミットをすることになります。この場合は、追加したいファイルについて `git add` コマンドを実行したあとで `git commit` コマンドを行います。

[source,console]
----
$ git add *.c
$ git add LICENSE
$ git commit -m 'initial project version'
----

//////////////////////////
We'll go over what these commands do in just a minute.
At this point, you have a Git repository with tracked files and an initial commit.
//////////////////////////
これが実際のところどういう意味なのかについては後で説明します。ひとまずこの時点で、監視対象のファイルを持つ Git リポジトリができあがり最初のコミットまで済んだことになります。

[[_git_cloning]]
//////////////////////////
==== Cloning an Existing Repository
//////////////////////////
==== 既存のリポジトリのクローン

//////////////////////////
If you want to get a copy of an existing Git repository – for example, a project you'd like to contribute to – the command you need is `git clone`.
If you're familiar with other VCS systems such as Subversion, you'll notice that the command is "clone" and not "checkout".
This is an important distinction – instead of getting just a working copy, Git receives a full copy of nearly all data that the server has.
Every version of every file for the history of the project is pulled down by default when you run `git clone`.
In fact, if your server disk gets corrupted, you can often use nearly any of the clones on any client to set the server back to the state it was in when it was cloned (you may lose some server-side hooks and such, but all the versioned data would be there – see <<_git_on_the_server>> for more details).
//////////////////////////
既存の Git リポジトリ (何か協力したいと思っているプロジェクトなど) のコピーを取得したい場合に使うコマンドが、`git clone` です。
Subversion などの他の VCS を使っている人なら「"checkout" じゃなくて "clone" なのか」と気になることでしょう。
これは重要な違いです。ワーキングコピーを取得するのではなく、Git はサーバーが保持しているデータをほぼすべてコピーするのです。
そのプロジェクトのすべてのファイルのすべての歴史が、デフォルトでは `git clone` で手元にやってきます。
実際、もし仮にサーバーのディスクが壊れてしまったとしても、どこかのクライアントに残っているクローンをサーバーに戻せばクローンした時点まで多くの場合は復元できるでしょう(サーバーサイドのフックなど一部の情報は失われてしまいますが、これまでのバージョン管理履歴はすべてそこに残っています。<<_git_on_the_server>>で詳しく説明します)。

//////////////////////////
You clone a repository with `git clone [url]`.(((git commands, clone)))
For example, if you want to clone the Git linkable library called libgit2, you can do so like this:
//////////////////////////
リポジトリをクローンするには `git clone [url]` とします。(((git commands, clone)))
たとえば、多言語へのバインディングが可能なGitライブラリであるlibgitをクローンする場合は次のようになります。

[source,console]
----
$ git clone https://github.com/libgit2/libgit2
----

//////////////////////////
That creates a directory named ``libgit2'', initializes a `.git` directory inside it, pulls down all the data for that repository, and checks out a working copy of the latest version.
If you go into the new `libgit2` directory, you'll see the project files in there, ready to be worked on or used.
If you want to clone the repository into a directory named something other than ``libgit2'', you can specify that as the next command-line option:
//////////////////////////
これは、まず``libgit2''というディレクトリを作成してその中で `.git` ディレクトリを初期化し、リポジトリのすべてのデータを引き出し、そして最新バージョンの作業コピーをチェックアウトします。
新しくできた `libgit2` ディレクトリに入ると、プロジェクトのファイルをごらんいただけます。
もし``libgit2''ではない別の名前のディレクトリにクローンしたいのなら、コマンドラインオプションでディレクトリ名を指定します。

[source,console]
----
$ git clone https://github.com/libgit2/libgit2 mylibgit
----

//////////////////////////
That command does the same thing as the previous one, but the target directory is called `mylibgit`.
//////////////////////////
このコマンドは先ほどと同じ処理をしますが、ディレクトリ名は `mylibgit` となります。

//////////////////////////
Git has a number of different transfer protocols you can use.
The previous example uses the `https://` protocol, but you may also see `git://` or `user@server:path/to/repo.git`, which uses the SSH transfer protocol.
<<_git_on_the_server>> will introduce all of the available options the server can set up to access your Git repository and the pros and cons of each.
//////////////////////////
Git では、さまざまな転送プロトコルを使用することができます。先ほどの例では `https://` プロトコルを使用しましたが、`git://` や `user@server:/path/to/repo.git` といった形式を使うこともできます。これらは SSH プロトコルを使用します。<<_git_on_the_server>>で、サーバー側で準備できるすべてのアクセス方式についての利点と欠点を説明します。
